@import "global.lvh"
@import "math.lvh"

@namespace global

def NaN() => 0 ; 0
def isNaN(x) => x != x
def true() => 1
def false() => 0
def rest() => 1
(def bool(a)
    => true ; a
    => false ; rest
)
def i_//(a, b) => math:int(a / b)
def i_if(=> expr, cond) => expr ; cond
(def i_else(expr, => fall)
    => fall ; isNaN(expr)
    => expr ; rest
)
(def i_&&(a, => b)
    => b ; a
    => a ; rest
)
(def i_||(a, => b)
    => a ; a
    => b ; rest
)
(def !(a)
    => false ; a
    => true ; rest
)
(def i_|(a, b)
    => true ; a
    => true ; b
    => false ; rest
)
(def i_&(a, b)
    => bool(b) ; a
    => bool(a) ; rest
)
(def i_^(a, b)
    => !b ; a
    => !a ; rest
)
def size(struct) => [struct](\size)
def flip(binaryop) => def(a, b) => [binaryop](b, a)
(def pair(a, b) =>
    (def obj(i)
        => a ; i = 0
        => b ; i = 1
        => 2 ; i = \size
        => "(" + str(a) + ", " + str(b) + ")" ; i = \str
    )
)
def i_->(a, b) => pair(a, b)
def prototype(obj) => [obj](\prototype)
